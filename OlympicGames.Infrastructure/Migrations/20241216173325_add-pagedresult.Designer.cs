// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OlympicGames.Infrastructure.Data;

#nullable disable

namespace OlympicGames.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241216173325_add-pagedresult")]
    partial class addpagedresult
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OlympicGames.Model.Entity.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("OlympicGames.Model.Entity.Athlete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("Athletes");
                });

            modelBuilder.Entity("OlympicGames.Model.Entity.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("AthleteId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MeladId")
                        .HasColumnType("int");

                    b.Property<int>("OlympicEventId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("OlympicGames.Model.Entity.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<int?>("AthleteId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("OlympicEventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("AthleteId");

                    b.HasIndex("OlympicEventId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("OlympicGames.Model.Entity.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AthleteId")
                        .HasColumnType("int");

                    b.Property<int?>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.HasIndex("CompetitionId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("OlympicGames.Model.Entity.Medal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("Medals");
                });

            modelBuilder.Entity("OlympicGames.Model.Entity.OlympicEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("YearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.ToTable("OlympicEvents");
                });

            modelBuilder.Entity("OlympicGames.Model.Entity.Year", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("OlympicEventId")
                        .HasColumnType("int");

                    b.Property<int>("YearNumber")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OlympicEventId");

                    b.ToTable("Years");
                });

            modelBuilder.Entity("OlympicGames.Model.Entity.Area", b =>
                {
                    b.HasOne("OlympicGames.Model.Entity.Competition", null)
                        .WithMany("Area")
                        .HasForeignKey("CompetitionId");
                });

            modelBuilder.Entity("OlympicGames.Model.Entity.Athlete", b =>
                {
                    b.HasOne("OlympicGames.Model.Entity.Competition", null)
                        .WithMany("Athlete")
                        .HasForeignKey("CompetitionId");
                });

            modelBuilder.Entity("OlympicGames.Model.Entity.Country", b =>
                {
                    b.HasOne("OlympicGames.Model.Entity.Area", null)
                        .WithMany("Country")
                        .HasForeignKey("AreaId");

                    b.HasOne("OlympicGames.Model.Entity.Athlete", null)
                        .WithMany("Country")
                        .HasForeignKey("AthleteId");

                    b.HasOne("OlympicGames.Model.Entity.OlympicEvent", null)
                        .WithMany("Country")
                        .HasForeignKey("OlympicEventId");
                });

            modelBuilder.Entity("OlympicGames.Model.Entity.Game", b =>
                {
                    b.HasOne("OlympicGames.Model.Entity.Athlete", null)
                        .WithMany("Game")
                        .HasForeignKey("AthleteId");

                    b.HasOne("OlympicGames.Model.Entity.Competition", null)
                        .WithMany("Game")
                        .HasForeignKey("CompetitionId");
                });

            modelBuilder.Entity("OlympicGames.Model.Entity.Medal", b =>
                {
                    b.HasOne("OlympicGames.Model.Entity.Competition", null)
                        .WithMany("Medal")
                        .HasForeignKey("CompetitionId");
                });

            modelBuilder.Entity("OlympicGames.Model.Entity.OlympicEvent", b =>
                {
                    b.HasOne("OlympicGames.Model.Entity.Competition", null)
                        .WithMany("OlympicEvent")
                        .HasForeignKey("CompetitionId");
                });

            modelBuilder.Entity("OlympicGames.Model.Entity.Year", b =>
                {
                    b.HasOne("OlympicGames.Model.Entity.OlympicEvent", null)
                        .WithMany("Year")
                        .HasForeignKey("OlympicEventId");
                });

            modelBuilder.Entity("OlympicGames.Model.Entity.Area", b =>
                {
                    b.Navigation("Country");
                });

            modelBuilder.Entity("OlympicGames.Model.Entity.Athlete", b =>
                {
                    b.Navigation("Country");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("OlympicGames.Model.Entity.Competition", b =>
                {
                    b.Navigation("Area");

                    b.Navigation("Athlete");

                    b.Navigation("Game");

                    b.Navigation("Medal");

                    b.Navigation("OlympicEvent");
                });

            modelBuilder.Entity("OlympicGames.Model.Entity.OlympicEvent", b =>
                {
                    b.Navigation("Country");

                    b.Navigation("Year");
                });
#pragma warning restore 612, 618
        }
    }
}
